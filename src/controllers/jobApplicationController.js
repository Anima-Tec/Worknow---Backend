import { prisma } from "../database/prismaClient.js";

// =====================================================
// üü£ USUARIO SE POSTULA A UN TRABAJO
// =====================================================
export const applyToJobController = async (req, res) => {
  try {
    // Manejar ambos casos: /job/:id/apply y /:jobId
    const jobId = Number(req.params.id || req.params.jobId);
    const userId = req.user?.id;
    const { name, email } = req.body;

    console.log("‚úÖ Datos extra√≠dos:", { userId, jobId, name, email });

    // Validaciones b√°sicas
    if (!userId) {
      console.warn("‚ö†Ô∏è Usuario no autenticado");
      return res.status(401).json({ 
        success: false,
        message: "Usuario no autenticado" 
      });
    }

    if (!jobId) {
      console.warn("‚ö†Ô∏è ID de trabajo requerido");
      return res.status(400).json({ 
        success: false,
        message: "ID de trabajo requerido" 
      });
    }

    // Verificar que el trabajo exista y pertenezca a una empresa
    const job = await prisma.job.findUnique({
      where: { id: jobId },
      include: { 
        company: { select: { id: true, nombreEmpresa: true } }
      },
    });
    
    if (!job) {
      console.warn("‚ùå Trabajo no encontrado:", jobId);
      return res.status(404).json({ 
        success: false,
        message: "Trabajo no encontrado" 
      });
    }

    console.log("‚úÖ Trabajo encontrado:", job.title, "Empresa:", job.company.nombreEmpresa);

    // Validar constraint √∫nico [userId, jobId] - evitar duplicados
    const existing = await prisma.jobApplication.findUnique({
      where: { userId_jobId: { userId, jobId } },
    });
    
    if (existing) {
      console.warn("‚ùå Ya existe postulaci√≥n:", { userId, jobId });
      return res.status(409).json({ 
        success: false,
        message: "Ya te postulaste a este trabajo" 
      });
    }

    // Actualizar nombre/email del usuario si se proporcionan
    const user = await prisma.user.findUnique({ where: { id: userId } });
    const updateData = {};
    if (name && !user.nombre) updateData.nombre = name;
    if (email && user.email !== email) updateData.email = email;

    if (Object.keys(updateData).length > 0) {
      await prisma.user.update({
        where: { id: userId },
        data: updateData,
      });
    }

    // Crear postulaci√≥n con status PENDIENTE
    console.log("üíæ Creando postulaci√≥n en la base de datos...");
    const application = await prisma.jobApplication.create({
      data: {
        userId,
        jobId,
        status: "PENDIENTE",
      },
      select: {
        id: true,
        status: true,
        createdAt: true,
      }
    });

    console.log("‚úÖ Postulaci√≥n creada:", application);
    console.log(`‚úÖ Postulaci√≥n ${application.id} creada correctamente`);

    return res.status(201).json({
      success: true,
      message: "Postulaci√≥n enviada correctamente",
      data: {
        id: application.id,
        status: application.status,
        createdAt: application.createdAt
      }
    });
  } catch (error) {
    console.error("‚ùå === ERROR APLICAR A TRABAJO ===");
    console.error("üí• Error completo:", error);
    console.error("üìù Mensaje de error:", error.message);
    console.error("üè∑Ô∏è C√≥digo de error:", error.code);
    console.error("üìä Stack trace:", error.stack);
    console.error("üèÅ === FIN ERROR ===");

    return res.status(500).json({
      success: false,
      message: "Error interno del servidor",
      error: process.env.NODE_ENV === 'development' ? error.message : "Error interno"
    });
  }
};

// =====================================================
// üü£ EMPRESA VE LAS POSTULACIONES A SUS TRABAJOS
// =====================================================
export const getCompanyJobApplicationsController = async (req, res) => {
  try {
    const companyId = req.user?.id;
    if (!companyId) return res.status(401).json({ message: "No autorizado" });

    const applications = await prisma.jobApplication.findMany({
      where: { job: { companyId: companyId } },
      include: {
        job: { select: { title: true } },
        user: { select: { nombre: true, email: true } },
      },
      orderBy: { createdAt: "desc" },
    });

    const formatted = applications.map((a) => ({
      id: a.id,
      jobTitle: a.job?.title || "Trabajo sin t√≠tulo",
      applicantName: a.user?.nombre || "Sin nombre",
      applicantEmail: a.user?.email || "Sin email",
      status: a.status,
      createdAt: a.createdAt,
    }));

    res.json(formatted);
  } catch (error) {
    console.error("‚ùå Error obteniendo postulaciones de trabajos:", error);
    res.status(500).json({ message: "Error obteniendo postulaciones" });
  }
};

// =====================================================
// üü£ EMPRESA ACTUALIZA EL ESTADO (aceptar / rechazar / revisi√≥n)
// =====================================================
export const updateJobApplicationStatusController = async (req, res) => {
  try {
    console.log("üöÄ === INICIO ACTUALIZAR ESTADO APLICACI√ìN TRABAJO ===");
    const id = Number(req.params.id);
    const { status } = req.body;
    const companyId = req.user?.id;

    console.log(`üè¢ Empresa actualizando aplicaci√≥n de trabajo ${id} a estado: ${status}`);

    if (!status) {
      return res.status(400).json({ 
        success: false,
        message: "Falta el nuevo estado" 
      });
    }

    // 1. Primero obtener la aplicaci√≥n para verificar permisos y datos
    const jobApplication = await prisma.jobApplication.findUnique({
      where: { id },
      include: {
        job: {
          select: {
            id: true,
            companyId: true,
            title: true
          }
        }
      }
    });

    if (!jobApplication) {
      return res.status(404).json({ 
        success: false,
        message: "Aplicaci√≥n de trabajo no encontrada" 
      });
    }

    // 2. Verificar que la empresa es due√±a del trabajo
    if (jobApplication.job.companyId !== companyId) {
      return res.status(403).json({ 
        success: false,
        message: "No autorizado para modificar esta aplicaci√≥n" 
      });
    }

    // 3. VALIDACI√ìN ESTRICTA: Solo permitir cambios si est√° PENDIENTE o EN_REVISION
    if (jobApplication.status !== "PENDIENTE" && jobApplication.status !== "EN_REVISION") {
      console.warn("‚ùå Intento de modificar aplicaci√≥n en estado final:", id, jobApplication.status);
      return res.status(400).json({ 
        success: false,
        message: `No se puede modificar una postulaci√≥n que est√° ${jobApplication.status === "ACEPTADO" ? "aceptada" : "rechazada"}. Solo se pueden modificar postulaciones pendientes o en revisi√≥n.` 
      });
    }

    // 4. Actualizar la aplicaci√≥n con transacci√≥n si es ACEPTADO
    let updatedApplication;
    if (status === "ACEPTADO") {
      // Usar transacci√≥n para rechazar otras aplicaciones al mismo trabajo
      await prisma.$transaction(async (tx) => {
        // Rechazar todas las dem√°s aplicaciones al mismo trabajo
        await tx.jobApplication.updateMany({
          where: {
            jobId: jobApplication.jobId,
            id: { not: id },
            status: { not: "ACEPTADO" }
          },
          data: { status: "RECHAZADO" }
        });

        // Actualizar la aplicaci√≥n seleccionada
        updatedApplication = await tx.jobApplication.update({
          where: { id },
          data: { status },
          include: {
            user: { select: { nombre: true, email: true } },
            job: { select: { title: true } }
          }
        });
      });
    } else {
      // Para otros estados, actualizar directamente
      updatedApplication = await prisma.jobApplication.update({
        where: { id },
        data: { status },
        include: {
          user: { select: { nombre: true, email: true } },
          job: { select: { title: true } }
        }
      });
    }

    console.log("‚úÖ Estado de aplicaci√≥n actualizado correctamente");
    return res.status(200).json({
      success: true,
      message: "Estado de aplicaci√≥n actualizado correctamente",
      data: updatedApplication
    });
  } catch (error) {
    console.error("‚ùå Error actualizando estado:", error);
    return res.status(500).json({ 
      success: false,
      message: "Error interno del servidor",
      error: process.env.NODE_ENV === 'development' ? error.message : "Error interno"
    });
  }
};

// =====================================================
// üü£ USUARIO VE SUS POSTULACIONES A TRABAJOS
// =====================================================
export const getMyJobApplicationsController = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId)
      return res.status(401).json({ message: "Usuario no autenticado" });

    const applications = await prisma.jobApplication.findMany({
      where: { userId },
      include: {
        job: {
          include: {
            company: { select: { nombreEmpresa: true } },
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });

    const formatted = applications.map((a) => ({
      id: a.id,
      status: a.status,
      createdAt: a.createdAt,
      jobTitle: a.job?.title || "Trabajo sin t√≠tulo",
      companyName: a.job?.company?.nombreEmpresa || "Desconocida",
    }));

    return res.status(200).json({
      success: true,
      message: "Postulaciones a trabajos obtenidas correctamente",
      data: formatted
    });
  } catch (error) {
    console.error("‚ùå Error obteniendo postulaciones de usuario:", error);
    return res.status(500).json({ 
      success: false, 
      message: "Error interno del servidor",
      error: process.env.NODE_ENV === 'development' ? error.message : "Error interno"
    });
  }
};
