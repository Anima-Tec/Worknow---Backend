// ==========================================================
// GENERATOR & DATASOURCE (SQLite)
// ==========================================================

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==========================================================
// ENUMS
// ==========================================================
enum Role {
  USER
  COMPANY
}

/**
 * Mantenemos la DB en inglés y mostramos ESPAÑOL en Prisma/Studio
 * Si en tu DB ya hay 'PENDING', 'ACCEPTED', 'REJECTED', esto evita errores.
 */
enum ApplicationStatus {
  PENDIENTE   @map("PENDING")
  EN_REVISION @map("IN_REVIEW")
  ACEPTADO    @map("ACCEPTED")
  RECHAZADO   @map("REJECTED")
  HECHO       @map("DONE")
  NO_HECHO    @map("NOT_DONE")
}

// ==========================================================
// MODELOS
// ==========================================================
model User {
  id                Int               @id @default(autoincrement())
  nombre            String?
  apellido          String?
  email             String            @unique
  password          String
  telefono          String?
  fechaNacimiento   DateTime?
  ciudad            String?
  profesion         String?
  biografia         String?
  experiencia       String?
  educacion         String?
  role              Role              @default(USER)

  // Back-relations
  applications      Application[]
  jobApplications   JobApplication[]
  completedProjects CompletedProject[]

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
}

model Company {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  role          Role       @default(COMPANY)
  nombreEmpresa String
  rut           String?
  telefono      String?
  direccion     String?
  ciudad        String?
  sector        String?
  sitioWeb      String?
  tamano        String?
  descripcion   String?
  logoUrl       String?

  // Back-relations
  projects      Project[]
  jobs          Job[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
}

model Project {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  skills            String?
  duration          String?
  modality          String?
  remuneration      String?
  projectUrl        String?

  companyId         Int
  company           Company            @relation(fields: [companyId], references: [id])

  // Back-relations
  applications      Application[]
  completedProjects CompletedProject[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@index([companyId])
}

model Job {
  id              Int             @id @default(autoincrement())
  title           String
  area            String?
  jobType         String?
  contractType    String?
  modality        String?
  location        String?
  remuneration    String?
  description     String?
  skills          String?
  projectUrl      String?

  companyId       Int
  company         Company         @relation(fields: [companyId], references: [id])

  // Back-relations
  jobApplications JobApplication[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt

  @@index([companyId])
}

model Application {
  id         Int                @id @default(autoincrement())
  userId     Int
  projectId  Int
  status     ApplicationStatus  @default(PENDIENTE)

  user       User               @relation(fields: [userId], references: [id])
  project    Project            @relation(fields: [projectId], references: [id])

  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model JobApplication {
  id         Int                @id @default(autoincrement())
  userId     Int
  jobId      Int
  status     ApplicationStatus  @default(PENDIENTE)

  user       User               @relation(fields: [userId], references: [id])
  job        Job                @relation(fields: [jobId], references: [id])

  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt

  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model CompletedProject {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  startDate    DateTime?
  endDate      DateTime?

  userId       Int
  user         User       @relation(fields: [userId], references: [id])

  // Vínculo opcional al Project original
  projectId    Int?
  project      Project?   @relation(fields: [projectId], references: [id])

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@index([userId])
  @@index([projectId])
}